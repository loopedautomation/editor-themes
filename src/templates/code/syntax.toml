[class]
name = "Class name"
color = "${palette.attribute}"
scope = ["entity.name.type", "entity.name.class", "entity.name.namespace", "entity.name.scope-resolution"]

[comment]
color = "${palette.comment}"
scope = ["comment", "definition.comment"]

[constant]
color = "${palette.constant}"
scope = ["constant.character", "constant.other", "support.constant", "variable.other.constant"]

[constant.language]
color = "${palette.boolean}"
scope = ["constant.language.boolean", "constant.language.null", "constant.language.undefined"]

[boolean]
name = "Boolean values"
color = "${palette.boolean}"
scope = ["constant.language.boolean.true", "constant.language.boolean.false"]

[entity.name.filename.find-in-files]
name = "Filename in Find in Files"
color = "${palette.primary}"

[entity.other.attribute-name]
name = "Tag attribute"
color = "${palette.attribute}"

[function]
color = "${palette.function_name}"
name = "Function name"
scope = ["entity.name.function", "meta.function-call.python", "new.expr.js", "support.function"]

[inherited_class]
name = "Inherited class"
scope = "entity.other.inherited-class"
style = "italic underline"
color = "${palette.attribute}"

[invalid]
color = "${palette.error}"
name = "Invalid"
scope = "invalid"

[json_string]
name = "JSON String"
color = "${palette.string}"
scope = ["meta.structure.dictionary.json", "string.quoted.double.json"]

[keyword]
scope = ["keyword", "storage.type", "storage.modifier"]
color = "${palette.keyword}"

[keyword.operator]
scope = ["keyword.operator", "punctuation.accessor"]
color = "${palette.operator}"

[keyword.operator.ternary]
scope = [
  "keyword.operator.ternary.jsx",
  "keyword.operator.ternary.js",
  "keyword.operator.ternary.ts",
  "keyword.operator.ternary.tsx"
]
color = "${palette.operator}"

[math_operator]
name = "Math and Arithmetic Operators"
scope = [
  "keyword.operator.arithmetic",
  "keyword.operator.assignment",
  "keyword.operator.comparison", 
  "keyword.operator.logical",
  "keyword.operator.increment",
  "keyword.operator.decrement"
]
color = "${palette.operator}"

[library_constant]
color = "${palette.function_name}"
name = "Library function"
scope = "support.function"

[line_number]
scope = "constant.numeric.line-number.find-in-files - match"
color = "${palette.number}"

[markdown_bold]
name = "Markdown Bold"
scope = "markup.bold.markdown"
style = "bold"

[markdown_emphasis]
name = "Markdown Emphasis"
scope = "markup.italic.markdown"
style = "italic"

[markdown_link_title_description]
color = "${palette.error}"
group = true
name = "Markdown Link Title/Description"

[markdown_link_title_description.string.other.link.description.markdown]
color = "${palette.error}"
scope = "string.other.link.description.markdown"

[markdown_link_title_description.string.other.link.title.markdown]
color = "${palette.error}"
scope = "string.other.link.title.markdown"

[markdown_list_punctuation]
color = "primary"
name = "Markdown List Punctuation"
scope = ["punctuation.definition.list.begin.markdown"]

[markup]
name = "Markup Styling"
scope = [".bold", ".italic"]
color = "${palette.base_content}"

[markup.changed]
color = "${palette.warning}"

[markup.deleted]
color = "${palette.error}"

[markup.heading]
color = "${palette.attribute}"

[markup.heading.setext]
color = "${palette.attribute}"
style = "bold"

[markup.inline.raw]
color = "${palette.number}"

[markup.inserted]
color = "${palette.success}"

[markup.list]
scope = ["markup.list.numbered.markdown", "markup.list.unnumbered.markdown"]
color = "${palette.variable}"

[markup.quote]
color = "${palette.string}"

[markup.quote.markdown]
color = "${palette.string}"
style = "italic"

[markup.strikethrough]
style = "strikethrough"

[markup.underline.link]
scope = [".markdown", ".image.markdown"]
color = "${palette.base_content}"

[meta.brace]
scope = [
  ".round.jsx",
  ".square.jsx",
  ".round.js",
  ".square.js",
  ".round.ts",
  ".square.ts",
  ".round.tsx",
  ".square.tsx"
]
color = "${palette.comment}"

[meta.diff]
scope = ["meta.diff", "diff.header", ".header"]
color = "${palette.base_content}"

[constant.numeric]
color = "${palette.number}"

[punctuation]
scope = ["punctuation.definition", "punctuation.separator", "punctuation.terminator"]
color = "${palette.comment}"

[punctuation.delimiter]
scope = ["punctuation.section", "meta.brace", "meta.bracket"]
color = "${palette.comment}"

[punctuation.definition.binding-pattern]
name = "Punctuation Definition"
scope = [
  ".js",
  ".jsx",
  ".ts",
  ".tsx",
  ".binding-pattern.object.js",
  ".binding-pattern.object.jsx",
  ".binding-pattern.object.ts",
  ".binding-pattern.object.tsx"
]
color = "${palette.comment}"

[punctuation.definition.block]
name = "Punctuation Definition"
scope = [
  ".js",
  ".jsx",
  ".ts",
  ".tsx"
]
color = "${palette.comment}"

[punctuation.definition.template-expression]
scope = [
  ".begin.jsx",
  ".end.jsx",
  ".begin.js",
  ".end.js",
  ".begin.ts",
  ".end.ts",
  ".begin.tsx",
  ".end.tsx"
]
color = "${palette.tag}"

[punctuation.section]
name = "Punctuation Section"
scope = [".embedded.begin.js", ".embedded.end.js", ".embedded.begin.jsx", ".embedded.end.jsx"]
color = "${palette.primary}"

[punctuation.section.embedded]
scope = [
  "punctuation.section.embedded.begin.js",
  "punctuation.section.embedded.end.js",
  "punctuation.section.embedded.begin.jsx",
  "punctuation.section.embedded.end.jsx",
  "punctuation.section.embedded.begin.ts",
  "punctuation.section.embedded.end.ts",
  "punctuation.section.embedded.begin.tsx",
  "punctuation.section.embedded.end.tsx"
]
color = "${palette.error}"

[reset]
name = "Reset JavaScript string interpolation expression"
scope = "meta.template.expression"
color = "${palette.base_content}"

[storage]
color = "${palette.base_content}"
name = "Storage"
scope = "storage"

[storage.type]
color = "${palette.primary_hover}"
style = "italic"

[string]
color = "${palette.string}"

[support]
name = "Library class/type"
scope = [".type", ".class"]
color = "${palette.string}"
style = "italic"

[tag_name]
name = "Tag name"
scope = ["entity.name.tag", "support.class.component.jsx", "support.class.component.js", "support.class.component.ts", "support.class.component.tsx"]
color = "${palette.tag}"

[template]
name = "Template Definition"
scope = ["punctuation.definition.template-expression", "punctuation.section.embedded"]
color = "${palette.primary}"

[token.debug-token]
color = "${palette.error}"

[token.error-token]
color = "${palette.error}"

[token.info-token]
color = "${palette.info}"

[token.warn-token]
color = "${palette.warning}"

[variable]
scope = ["variable", "support.other.variable"]
color = "${palette.variable}"

[variable.parameter]
scope = ["variable.parameter", "meta.function.parameter"]
color = "${palette.variable}"

[variable.property]
scope = ["variable.other.property", "support.type.property-name"]
color = "${palette.function_name}"

[type]
name = "Types"
scope = ["entity.name.type", "support.type", "storage.type.primitive"]
color = "${palette.string}"

[constant.character.escape]
name = "Escape Characters"
color = "${palette.constant}"

[regex]
name = "Regular Expressions"
scope = ["string.regexp"]
color = "${palette.function_name}"

[url]
name = "URLs"
scope = ["string.other.link", "*url*", "*link*", "*uri*"]
color = "${palette.primary}"
